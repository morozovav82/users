apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded #удалять контейнер после выполнения Job
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      initContainers:
        - name: check-db-ready
          image: postgres:latest
          env:
            - name: POSTGRES_HOST
              value: {{ include "postgresql.fullname" . | quote }}
            - name: POSTGRES_PORT
              value: {{ .Values.postgresql.service.port | quote }}
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT; 
              do echo waiting for database; sleep 2; done;
      containers:
      - name: post-install-job
        env:
          - name: DATABASE_URI
            value: {{ printf "postgresql://%s:%s@%s:%s/%s" .Values.postgresql.postgresqlUsername .Values.postgresql.postgresqlPassword (include "postgresql.fullname" .) .Values.postgresql.service.port .Values.postgresql.postgresqlDatabase  | quote }}
        image: postgres:latest
        command:
          - sh
          - "-c"
          - |
            psql $DATABASE_URI <<'EOF'
              create table if not exists users (id serial not null, username varchar(100), firstName varchar(100), lastName varchar(100), email varchar(100), phone varchar(100), password varchar(100));
              alter table users add constraint users_pk unique (id);
              insert into users (username) values ('admin');

              create table if not exists user_roles (user_id int not null, role varchar(10) not null);
              alter table user_roles add constraint user_roles_pk unique (user_id, role);
              create index user_roles_user_id_index on user_roles (user_id);
              insert into user_roles (user_id, role)) values ('admin', 'ROLE_ADMIN');
              insert into user_roles (user_id, role)) values ('admin', 'ROLE_MANAGER');

              create table if not exists user_messages (id serial not null, sent timestamp, topic varchar(100), routing_key varchar(100), message text, class_name varchar(500));
              alter table users add constraint user_messages_pk unique (id);
              create index user_messages_sent_index on user_messages (sent);
            EOF

  backoffLimit: 0
